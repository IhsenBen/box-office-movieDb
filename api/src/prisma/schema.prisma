//this is the is db model written in a 'prisma' way
// run migrate after each design change

//note to self: prisma don't support optional lists but they can be empty when creating a new one :)


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}


model User {
  id    Int    @id @default(autoincrement())
  userName  String
  email String
  password String
  role Role @default(USER)
  reviews Review[]
  reviewComments ReviewComment[]
  profile Profile?
  Watchlist WatchList?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Profile {
  id    Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  favoriteMovies String[]
  watchedMovies String[]
  bio String?
  socialLinks String[]
}


model Review {
  id    Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  movieId Int
  rating Int
  comment String?
  reviewComments ReviewComment[]
  likedBy Int[]
  dislikedBy Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewComment{
  id Int @id @default(autoincrement())
  review Review @relation(fields: [reviewId], references: [id])
  user  User   @relation(fields: [authorId], references: [id])
  reviewId Int
  authorId Int
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


//model where each user can have a WatchList with many movies
model WatchList {
  id Int @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  movieId String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
